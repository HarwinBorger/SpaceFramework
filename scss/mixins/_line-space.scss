/*
 * Line-space mixin
 * @description: mixin is used to define margins on bottom and top of element based on the line-height and default font size settings
 *
 * @uses: (array)$line-height
 * @uses: (array)$font-size
 *
 * @para: (int)$top-multiplier
 * @para: (int)$bottom-multiplier
 * @para: (string)$top-multiplier
 * @para: (int)$correction-multiplier
 *
 * @example: @include line-margin(2,1);
 *          -> will output on small screen: margin-top: 3rem; margin-bottom: 1.5rem;
 * @example: @include line-margin(2,1,1);
 *          -> will output on large screen: margin-top: 3.4rem; margin-bottom: 1.7rem;
 *
 */

/* postcss-sorting: off */
$line-space-register: (
	vertical:(
		top, bottom
	),
	horizontal: (
		left, right
	)
);

@mixin line-space($first-multiplier: false, $second-multiplier:false, $correction-multiplier: 0, $size: default, $type: margin, $direction: vertical) {
	$base-font-size: get-config($font-size, default, 'small');

	//Loop through different line height breakpoints to calculate correct line space
	@each $breakpoint, $line-height-value in map-get($line-height, $size) {
		// Try to get font size for current breakpoint
		$get-font-size: get-config($font-size, default, $breakpoint);

		// If font size is set for current breakpoint than set font-size. Else use font size of previous line-height breakpoint
		@if ($get-font-size!=null) {
			$base-font-size: $get-font-size;
		}

		//Add breakpoint
		@include breakpoint($breakpoint) {
			//Calculate possible correction difference
			$difference: ($line-height-value - 1) / 2; //$line-height-value Minus default height of font-size Split by 2. So 1.5 becomes .5 split by two become .25
			//Multiply difference and add unit such as rem or px depending on font-size setting for breakpoint
			$correction: $difference * $correction-multiplier * $base-font-size;

			//Calculate margin top
			@if ($first-multiplier != false) {
				$default-first: ($line-height-value * $first-multiplier * $base-font-size);
				#{$type}-#{nth(map_get($line-space-register,$direction),1)}: ($correction + $default-first);
			}

			//Calculate margin bottom
			@if ($second-multiplier != false) {
				$default-second: ($line-height-value * $second-multiplier * $base-font-size);
				#{$type}-#{nth(map_get($line-space-register,$direction),2)}: ($correction + $default-second);
			}
		}
	}
}

//Shortcuts to add line space for padding or margin
@mixin line-margin($top-multiplier: false, $bottom-multiplier:false, $correction-multiplier: 0, $size: default) {
	$attribute: margin;
	$direction: vertical;
	@include line-space($top-multiplier, $bottom-multiplier, $correction-multiplier, $size, $attribute, $direction);
}

@mixin line-padding($top-multiplier: false, $bottom-multiplier:false, $correction-multiplier: 0, $size: default) {
	$attribute: padding;
	$direction: vertical;
	@include line-space($top-multiplier, $bottom-multiplier, $correction-multiplier, $size, $attribute, $direction);
}

@mixin indent-padding($left-multiplier: false, $right-multiplier:false, $correction-multiplier: 0, $size: default) {
	$attribute: padding;
	$direction: horizontal;
	@include line-space($left-multiplier, $right-multiplier, $correction-multiplier, $size, $attribute, $direction);
}

@mixin indent-margin($left-multiplier: false, $right-multiplier:false, $correction-multiplier: 0, $size: default) {
	$attribute: margin;
	$direction: horizontal;
	@include line-space($left-multiplier, $right-multiplier, $correction-multiplier, $size, $attribute, $direction);
}

/* postcss-sorting: on */