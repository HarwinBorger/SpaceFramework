/*
 * Space Model Mixin
 *
 * Author: Harwin Borger
 *
 * @uses: (array)$space-presets
 * @uses: (array)$space-preset-settings
 *
 * TODO building fallback for single and multiple viewport sizes. Currently you need to give up all different breakpoints in order to have it work. So you only 'small' is not enough, you still need to fill in 'medium' and 'large'
 */

$space-side-register: (
	top, right, bottom, left
);

$space-directions-register: (
	top:(top),
	right:(right),
	bottom:(bottom),
	left: (left),
	y: (top, bottom),
	x: (right, left)
);


/**
 * Get the space preset variable
 * @public
 */
@function var-space-preset($preset-name) {
	@return get-var('sp', $preset-name);
}

/**
 * Set the space preset variable
 * @public
 */
@mixin var-space-preset($preset-name, $value) {
	#{set-var('sp', $preset-name)}: su($value);
}

/**
 * Allow negative classes
 * @private
 */
@function allow-negative-classes($preset-conf,$type) {
	@if (map_get($preset-conf,negative-classes) != true) {
		@return false;
	}

	@if ($type == padding) {
		@return false;
	}

	@return true;
}

@function allow-combined-sides($type) {
	@return space-prefix-type($type);
}

/**
 * Get space preset configuration
 * @description if specific preset has a specific custom configuration, then use those. If not use default configuration
 */
@function get-space-preset-configuration($configurations) {
	$conf-keys: (types, direction-classes, negative-classes, viewport-classes, viewport-only-classes);

	@each $conf-key in $conf-keys {
		// If custom configuration is not set, then use default configuration
		@if (map_get($configurations, $conf-key) == null) {
			// Get default configuration
			$configuration: map_get($space-preset-settings, $conf-key);
			// Add default configuration to configurations
			$configurations: map-merge($configurations, ($conf-key: $configuration)) // Use default settings
		}
	}

	@return $configurations;
}

@function extend-class-name($class-name-array, $extendClass) {
	$newClassName: '';

	@each $class-name in $class-name-array {
		@if $newClassName == '' {
			$newClassName: '#{$class-name}-#{$extendClass}';
		} @else {
			$newClassName: '#{$newClassName}, #{$class-name}-#{$extendClass}';
		}
	}

	@return $newClassName;
}

/*
* space-set-property
*
* @para $side: defines which side has to be generated
* @para $value: defines which values need to be used
* @para $type: defines what kind of type needs to be used
* @para $sign: defines whether or not a positive (1) or negative (-1) value needs to be generated.
*/

@mixin space-set-property($side, $value, $type, $sign:1) {
	$typeName: '';

	@if (space-prefix-type($type)) {
		$typeName: $type+'-';
	}

	//Set css rule like: padding-left: 5px; or margin-left: 5px;
	$cssPropertyName: false;
	$cssPropertyValue: false;

	@if ($side == false) { //Combined all values
		//Set property
		$cssPropertyName: #{$type};
		$cssPropertyValue: $value;
	} @else {
		//Set property name based on side
		$cssPropertyName: #{$typeName+$side};
		//Retrieve variable position based on side
		$variablePosition: index($space-side-register, $side);

		//Check if values is not null
		@if ($value != null) {
			$cssPropertyValue: $value * $sign;
		} @else {
			@debug ('Values is not allowed to be: ' $value);
		}
	}

	//Set property
	#{$cssPropertyName}: $cssPropertyValue;
}

@mixin space-loop-sides($class-name-array, $preset-conf, $value, $type) {
	$negative: -1;
	//Set css class like: .[preset-name]-[type], .[preset-name]-[type]-[size]
	#{$class-name-array} {
		@if (allow-combined-sides($type)==true) {
			@include space-set-property(false, $value, $type);
		} @else {
			@each $side in $space-side-register {
				@include space-set-property($side, $value, $type);
			}
		}
	}

	@if (allow-negative-classes($preset-conf,$type) == true) {
		$classNameNegative: extend-class-name($class-name-array, 'negative');

		#{$classNameNegative} {
			@each $side in $space-side-register {
				@include space-set-property($side, $value, $type, $negative);
			}
		}
	}

	//Loop through different directions and add different classes
	$directions: map_get($preset-conf, direction-classes);

	@each $direction in $directions {
		$sides: map_get($space-directions-register, $direction);
		$classNameDirection: extend-class-name($class-name-array, $direction);

		//Print css class like based on sides: .space-[type]-vertical, .space-[type]-[size]-horizontal
		#{$classNameDirection} {
			@each $side in $sides {
				@include space-set-property($side, $value, $type);
			}
		}

		//Check if negative values are allowed
		@if (allow-negative-classes($preset-conf,$type) == true) {
			//If allowed generate negative classes: .space-[type]-[direction]-negative
			$classNameDirectionNegative: extend-class-name($class-name-array, '#{$direction}-negative');

			#{$classNameDirectionNegative} {
				@each $side in $sides {
					@include space-set-property($side, $value, $type, $negative);
				}
			}
		}
	}
}

@mixin space-loop-viewports($class-name, $preset-conf, $type) {
	@if (map_get($preset-conf,viewports) != null) {
		$base-class: '.#{$class-name}';
		$class-array: ();
		$class-array: append($class-array, $base-class);

		$preset-name: map_get($preset-conf, preset-name);
		$viewports: map_get($preset-conf, viewports);
		$viewport-classes: map_get($preset-conf, viewport-classes);
		$viewport-only-classes: map_get($preset-conf, viewport-only-classes);

		// Loop through all viewports
		@each $viewport, $value in $viewports {
			$value: convert-space-units($value, $viewport);

			//Generate breakpoints
			@include breakpoint($viewport) {

				@if ($viewport-classes == true and $viewport != 'small') {
					$viewport-class: '.#{$viewport}-#{$class-name}';
					$class-array: append($class-array, $viewport-class, comma);
				}

				@include space-loop-sides($class-array, $preset-conf, $value, $type);
			}

			//Generate breakpoint only classes
			@if ($viewport-only-classes == true) {
				$viewport-only-class: '.#{$viewport}-only-#{$class-name}';

				@include breakpoint($viewport only) {
					@include space-loop-sides($viewport-only-class, $preset-conf, $value, $type);
				}
			}
		}
	} @else {
		@warn ("Classes for '#{$class-name}' are not generated because 'viewports' in $space-object-settings is missing");
	}
}

/**
 * Loop through types (padding, margin, positions)
 */
@mixin space-loop-types($preset-name, $preset-conf) {
	$types: map_get($preset-conf, types);

	@each $type in $types {
		$suffix: '';

		// Don't use 'type' in classname when 'position' to stick to vanilla CSS naming convention
		@if($type!=position){
			$suffix: '-#{$type}';
		}

		$class-name: '#{$preset-name}#{$suffix}';

		@include space-loop-viewports($class-name, $preset-conf, $type);
	}
}

/**
 * Loop through each viewport to set a variable for preset
 */
@mixin space-set-variables($preset-name, $preset-conf) {
	$viewports: map_get($preset-conf, viewports);
	@each $viewport, $value in $viewports {
		@include breakpoint($viewport) {
			@include var-space-preset($preset-name, $value);
			@include var-space-preset($preset-name+'-n', $value*-1);
		}
	}
}

/**
 * Loop through each space preset
 */
@mixin space-loop-presets() {
	// Loop through each space preset
	@each $preset-name, $preset-conf in $space-presets {
		// Mix default configuration  with new settings
		$preset-conf: get-space-preset-configuration($preset-conf);
		// Safe preset-name in configuration for later use
		$preset-conf: map-merge((preset-name: $preset-name), $preset-conf);

		// Set CSS variables
		// Todo write logic for using the variables
		:root {
			@include space-set-variables($preset-name, $preset-conf);
		}

		// Loop through each type (padding, margin, positions)
		@include space-loop-types($preset-name, $preset-conf);
	}
}

/*
 * @return Layout Classes
 */
@mixin space-preset-classes() {
	@include space-loop-presets();
}


/************************************************
 * DEPRECATED FUNCTIONS
 */

/*
 * @return classes for using general styling
 *
 * Deprecated as of 1.0
 */
@mixin space-classes() {
	@warn ('[DEPRECATED] - "space-classes()" is deprecated since SpaceFramework [1.0]. Please use "space-preset-classes()" instead');

	@include space-preset-classes();
}


/*
 * @return Layout Classes
 *
 * Deprecated as of 1.1
 */
@mixin layout-classes() {
	@warn ('[DEPRECATED] - "layout-classes()" is deprecated since SpaceFramework [1.1]. Please use "space-presets-classes()" instead');

	@include space-preset-classes();
}