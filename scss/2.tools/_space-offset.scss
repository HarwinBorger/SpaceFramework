/* postcss-sorting: off */

/*
 * Line-space mixin
 * @description: mixin is used to define margins on bottom and top of element based on the line-height and default font size settings
 *
 * @uses: (array)$line-height
 * @uses: (array)$font-size
 *
 * @para: (int)$top-multiplier
 * @para: (int)$bottom-multiplier
 * @para: (string)$top-multiplier
 * @para: (int)$correction-multiplier
 *
 * @example: @include line-margin(2,1);
 *          -> will output on small screen: margin-top: 3rem; margin-bottom: 1.5rem;
 * @example: @include line-margin(2,1,1);
 *          -> will output on large screen: margin-top: 3.4rem; margin-bottom: 1.7rem;
 *
 */
$space-offset-root-list: (0);

@function offsetName($value) {
	@return --offset-#{str-replace(#{$value},'.','-')};
}

@mixin space-offset-root($value) {
	@if $value != false and index($space-offset-root-list, $value) == null {
		// Add value to list so css variable won't be generated again
		$space-offset-root-list: join($space-offset-root-list, $value) !global;

		@each $breakpoint, $space-value in $space-unit-sizes {
			//Add breakpoint
			@at-root {
				:root {
					@include breakpoint($breakpoint) {
						$calculated-value: convert-space-units($value, $breakpoint);
						#{offsetName($value)}: ($calculated-value);
					}
				}
			}
		}
	}
}

@mixin space-offset(
	$top: false,
	$right:false,
	$bottom: false,
	$left: false,
	$type: margin
) {
	$space-side-map: (
		'top': $top,
		'right': $right,
		'bottom': $bottom,
		'left': $left
	);

	@if space-legacy() {
		@each $side, $side-value in $space-side-map {
			//Calculate type top
			@if ($side-value != false) {
				$breakpoint: last(map-keys($space-unit-sizes));
				$calculated-value: convert-space-units($side-value, $breakpoint);
				#{$type}-#{$side}: ($calculated-value);
			}
		}
	}

	// Modern browsers
	@each $side, $side-value in $space-side-map {
		@if $side-value != false {
			$value: strip-unit($side-value);

			@include space-offset-root($value);
			#{$type}-#{$side}: var(#{offsetName($value)});
		}
	}
}

// Space shortcuts for padding/margin and horizontal/vertical

/* SPACE HELPERS */
@mixin space-offset-sides($top, $right, $bottom, $left, $type) {
	// If only $top value is given than make $right equal to top
	@if ($right == default) {
		$right: $top;
	}

	// If $left value is default than make $left equal to $right
	@if ($left == default) {
		$left: $right;
	}

	// If $right has a value and $bottom has no value make $bottom equal to $right
	@if ($bottom == default) {
		$bottom: $top;
	}

	@include space-offset($top, $right, $bottom, $left, $type);
}

@mixin space-offset-vertical($top, $bottom, $type) {
	@if ($bottom == default) {
		$bottom: $top;
	}

	@include space-offset($top, false, $bottom, false, $type);
}

@mixin space-offset-horizontal($left, $right, $type) {
	@if ($right == default) {
		$right: $left;
	}

	@include space-offset(false, $right, false, $left, $type);
}

/* SPACE MARGIN MIXINS */
// Origin
@mixin margin($top: false, $right: default, $bottom: default , $left: default) {
	$type: margin;
	@include space-offset-sides($top, $right, $bottom, $left, $type);
}

// Directions
@mixin margin-vertical($top: false, $bottom: default) {
	$type: margin;
	@include space-offset-vertical($top, $bottom, $type);
}

@mixin margin-horizontal($left: false, $right: default) {
	$type: margin;
	@include space-offset-horizontal($left, $right, $type);
}

// Sides
@mixin margin-top($top: false) {
	$type: margin;
	@include space-offset($top, false, false, false, $type);
}

@mixin margin-right($right: false) {
	$type: margin;
	@include space-offset(false, $right, false, false, $type);
}

@mixin margin-bottom($bottom: false) {
	$type: margin;
	@include space-offset(false, false, $bottom, false, $type);
}

@mixin margin-left($left: false) {
	$type: margin;
	@include space-offset(false, false, false, $left, $type);
}

/* SPACE PADDING MIXINS */
// Origin
@mixin padding($top: false, $right: default, $bottom: default, $left: default) {
	$type: padding;
	@include space-offset-sides($top, $right, $bottom, $left, $type);
}

// Directions
@mixin padding-vertical($top: false, $bottom: default) {
	$type: padding;
	@include space-offset-vertical($top, $bottom, $type);
}

@mixin padding-horizontal($left: false, $right: default) {
	$type: padding;
	@include space-offset-horizontal($left, $right, $type);
}

// Sides
@mixin padding-top($top: false) {
	$type: padding;
	@include space-offset($top, false, false, false, $type);
}

@mixin padding-right($right: false) {
	$type: padding;
	@include space-offset(false, $right, false, false, $type);
}

@mixin padding-bottom($bottom: false) {
	$type: padding;
	@include space-offset(false, false, $bottom, false, $type);
}

@mixin padding-left($left: false) {
	$type: padding;
	@include space-offset(false, false, false, $left, $type);
}

/* postcss-sorting: on */