/**
 * Font Presets
 * @note if $font-preset-value is set on 'inherit' make sure the 'default' $font-preset is set on the '<body>' element
 *
 * @require $font-preset
 * @require $font-families with cap-height set
 * @require $space-unit-sizes
 *
 * @param $font-size-value (inherit | string)
 * @param $line-height (list)
 * @param $set-align-classes (true | false | reset)
 *
 */

$class-align-baseline: '.align-baseline' !default;
$class-align-capline: '.align-capline' !default;
$class-align-median: '.align-median' !default;
$class-fit: '.fit' !default;

// Short vars
$short-variable: (
	font-size: 'fs',
	line-height: 'lh',
	capheight: 'ch',
	xheight: 'xh',
);

/* Variable function */
@function shortVar($prefix, $value) {
	@return #{--#{$prefix}-#{map-get($short-variable, $value)}};
}

@function setVar($prefix, $value) {
	@return shortVar($prefix, $value);
}

@function getVar($prefix, $value) {
	@return var(#{shortVar($prefix, $value)});
}

/* Calculate font functions  */
@function calcCenter($line-height, $font-size) {
	$center-correction: ($line-height - $font-size) / 2; //$line-height-value Minus default height of font-size Split by 2. So 1.5 becomes .5 split by two become .25
	@return $center-correction;
}

@function calcCapheight($font-size, $line-height, $font-cap-height) {
	// Calculate baseline and capline
	$font-correction: $font-size * ((1 - $font-cap-height )/ 2); // Split correction by 2 because only 50% of the alignments needs to be done
	$capheight-correction: calcCenter($line-height, $font-size) + $font-correction;

	@return $capheight-correction;
}

@function calcXheight($font-size, $line-height, $font-cap-height, $font-x-height) {
	$font-correction: $font-size * ((1 - $font-cap-height*$font-x-height )/ 2);
	$xheight-correction: calcCenter($line-height, $font-size) + $font-correction;

	@return $xheight-correction;
}

@mixin space-font-preset-root($set-font-preset: default) {
	// Write back $set-font-preset to variable to keep original value
	$font-preset-value: $set-font-preset;
	@if ($set-font-preset == inherit) {
		$font-preset-value: default; // Set $set-font-preset-value to default to still set .align-baseline and .align-capline classes
	}

	// Get font-preset settings
	$font-preset: map-get($font-presets, $font-preset-value);

	// Set font-preset variables
	$font-size-list: map-get($font-preset, font-size);
	$line-height-list: map-get($font-preset, line-height);
	$font: default;

	// If font family is added to preset overwrite default
	@if (map-has-key($font-preset, font)) {
		$font: map-get($font-preset, font);
	}

	// Set default value for font-size
	$font-size: $font-size-list;
	@if (is-list($font-size-list)) {
		$font-size: nth($font-size-list, 1);
	}

	// Set default value for line-height
	$line-height: $line-height-list;
	@if (is-list($line-height-list)) {
		$line-height: nth($line-height-list, 1);
	}

	// Set default value for font-list
	$font-list: map-get($fonts, default);
	@if (is-list($font) == false) {
		$font-list: map-get($fonts, $font);
	} @else {
		@warn ('different fonts for each breakpoint is not yet supported')
	}

	// Set font settings
	$font-family: map-get($font-list, family);
	$font-cap-height: map-get($font-list, cap-height);
	$font-x-height: map-get($font-list, x-height);

	// Print font-family

	@each $breakpoint in $space-breakpoints {
		$index: index($space-breakpoints, $breakpoint);

		//@each $breakpoint, $set-font-preset-list in map-get($set-font-presets, $set-font-preset-value) {
		@include breakpoint($breakpoint) {
			// Set font-size for current breakpoint or fallback on font-size of previous breakpoint
			@if ($index <= length($font-size-list)) {
				$font-size: nth($font-size-list, $index);
			}
			// Set line-height for current breakpoint or fallback on line-height of previous breakpoint
			@if ($index <= length($line-height-list)) {
				$line-height: nth($line-height-list, $index);
			}

			// Check if $set-font-preset is a preset array
			// Get font-size
			$font-size-value: $font-size;

			// Calculate line-height
			$line-height-value: convert-space-units($line-height, $breakpoint);

			// Calculate baseline and capline
			$capheight-correction-value: calcCapheight($font-size-value, $line-height-value, $font-cap-height);

			// Calculate median
			$xheight-correction-value: calcXheight($font-size-value, $line-height-value, $font-cap-height, $font-x-height);

			// Set font size
			#{setVar($font-preset-value, font-size)}: #{$font-size-value};

			// If line-height should be set
			@if ($line-height != false) {
				// Set line height
				#{setVar($font-preset-value, line-height)}: #{$line-height-value};
			}

			// Set translate for baseline correction
			@if ($capheight-correction-value != false) {
				// Add element to .align-baseline object
				#{setVar($font-preset-value, capheight)}: #{$capheight-correction-value};
			}

			@if ($xheight-correction-value != false) {
				// Add element to .align-xline object
				#{setVar($font-preset-value, xheight)}: #{$xheight-correction-value};
			}
		}
	}
}

@mixin space-font-preset-values($set-font-preset: default, $line-height: default, $set-align-classes: true) {
	// Write back $set-font-preset to variable to keep original value
	$font-preset-value: $set-font-preset;
	@if ($set-font-preset == inherit) {
		$font-preset-value: default; // Set $set-font-preset-value to default to still set .align-baseline and .align-capline classes
	}

	// Get font-preset settings
	$font-preset: map-get($font-presets, $font-preset-value);

	$font: default;

	// If font family is added to preset overwrite default
	@if (map-has-key($font-preset, font)) {
		$font: map-get($font-preset, font);
	}

	// Set default value for font-list
	$font-list: map-get($fonts, default);
	@if (is-list($font) == false) {
		$font-list: map-get($fonts, $font);
	} @else {
		@warn ('different fonts for each breakpoint is not yet supported')
	}
	// Get font-sizes
	$font-size-fallback-value: last(map-get($font-preset, font-size)); // Get highest value

	// Set font settings
	$font-family-value: map-get($font-list, family);

	$font-size-value: #{getVar($font-preset-value, font-size)};
	$line-height-value: #{getVar($font-preset-value, line-height)};

	// Overwrite font-size and line-height with inherit when it should be inherit
	@if ($set-font-preset == inherit) {
		$font-size-value: inherit;
		$line-height-value: inherit;
	}

	/**
	 * ASSIGN VALUES TO ATTRIBUTES
	 */

	// Print font-family
	@if ($font != default) {
		font-family: $font-family-value;
	}

	// Print font size
	@if space-legacy() {
		font-size: $font-size-fallback-value;
	}

	font-size: $font-size-value;

	// Print line height
	@if ($line-height != false) {
		line-height: $line-height-value;
	}

	// Set typography alignment classes
	@if ($set-align-classes == true) {
		// Add element to .align-baseline object
		@if (space-support(align-baseline)) {
			#{$class-align-baseline} & {
				// Set short variable
				--s: translateY(#{getVar($font-preset-value, capheight)});
				transform: var(--s);
			}
		}

		// Add element to .align-capline object
		@if (space-support(align-capline)) {
			#{$class-align-capline} & {
				--s: translateY(calc(#{getVar($font-preset-value, capheight)} * -1));
				transform: var(--s);
			}
		}

		@if (space-support(align-median)) {
			#{$class-align-median} & {
				--s: translateY(calc(#{getVar($font-preset-value, xheight)} * -1));
				transform: var(--s);
			}
		}

		@if (space-support(fit-baseline)) {
			#{$class-align-baseline} #{$class-fit} > &:first-child,
			#{$class-align-baseline}#{$class-fit} > &:first-child {
				margin-top: calc(#{getVar($font-preset-value, capheight)} * -2);
			}
		}

		@if (space-support(fit-capline)) {
			#{$class-align-capline} #{$class-fit} > &:last-child,
			#{$class-align-capline}#{$class-fit} > &:last-child {
				margin-bottom: calc(#{getVar($font-preset-value, capheight)} * -2);
			}
		}
	}
}

/*
 * Font preset mixin
 *
 * @example
 * @include font-preset(large) => font-size: 24rem; line-height: 3.2rem;
 *
 * @param $set-font-preset (array-key | inherit) string of array-key of $set-font-presets
 * @param $set-align-classes (true | false)
 */
@mixin font-preset($set-font-preset: default, $set-align-classes: true) {
	@include space-font-preset-values($set-font-preset, true, $set-align-classes);
}

/*
 * Font-size function
 */
@mixin font-size($font-size-value: default) {
	@include space-font-preset-values($font-size-value, false, false);
}

/*
 * Font-preset root variables
 *
 * @description this mixins creates root variables. Working from Edge 15+
 */
@mixin font-preset-variables() {
	:root {
		@each $size, $value in $font-presets {
			@include space-font-preset-root($size);
		}
	}
}

/*
 * Legacy
 */
@mixin font-preset-root() {
	@warn '`font-preset-root` is a deprecated function since 0.16 use `font-preset-variables` instead';
	@include font-preset-variables();
}

/*
 * Font-size-classes mixin
 *
 * @description this mixin adds classes for all the different font-sizes
 *
 * @example: font-size-small | font-size-default
 */

@mixin font-size-classes() {
	@each $size, $value in $font-presets {
		.font-size-#{$size} {
			@include font-size($size);
		}
	}
}

/*
 * Font-preset-classes mixin
 *
 * @description this mixin adds classes for all the different font-presets
 * @example: font-preset-large | font-preset-xlarge
 */
@mixin font-preset-classes() {
	@each $size, $value in $font-presets {
		.font-preset-#{$size} {
			@include font-preset($size);
		}
	}
}

