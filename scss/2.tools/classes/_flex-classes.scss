@mixin flex-classes() {
	.flex {
		display: flex;

		> .auto {
			flex: 1;
		}

		> .grow {
			flex: auto 0 0;
		}

		> .shrink {
			flex: 0 auto 0;
		}

		@each $viewport, $size in $viewports {
			$prefix: '#{$viewport}-';

			@if ($viewport == 'small') {
				$prefix: '';
			}

			@include breakpoint($viewport) {
				// Grid Gap
				@each $gap in $flex-gap-classes {
					&.#{$prefix}gap-#{$gap} {
						margin-right: su($gap/-2); // todo replace with flex-gap when full browser support: https://caniuse.com/flexbox-gap
						margin-left: su($gap/-2); // todo replace with flex-gap when full browser support: https://caniuse.com/flexbox-gap

						> * {
							margin-right: su($gap/2); // todo replace with flex-gap when full browser support: https://caniuse.com/flexbox-gap
							margin-left: su($gap/2); // todo replace with flex-gap when full browser support: https://caniuse.com/flexbox-gap
						}
					}
				}
			}
		}
	}

	.flex-direction {
		&-row {
			flex-direction: row;
		}

		&-column {
			flex-direction: column;
		}
	}

	.align-items {
		&-start {
			align-items: flex-start;
			align-items: start;
		}

		&-center {
			align-items: center;
		}

		&-end {
			align-items: flex-end;
			align-items: end;
		}
	}

	.justify {
		&-start {
			justify-content: flex-start;
			justify-content: start;
		}

		&-end {
			justify-content: flex-end;
			justify-content: end;
		}

		&-left {
			justify-content: flex-start;
			justify-content: left;
		}

		&-right {
			justify-content: flex-end;
			justify-content: right;
		}

		&-center {
			justify-content: center;
		}

		&-space-between {
			justify-content: space-between;
		}

		&-space-evenly {
			justify-content: space-evenly;
		}

		&-space-around {
			justify-content: space-around;
		}
	}
}
